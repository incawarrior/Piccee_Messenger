
/* -------------------------------------------------------------------------
 * !!! AUTOMATICALLY GENERATED CODE !!!
 * -------------------------------------------------------------------------
 * This file was automatically generated by the OrangeBits compiler.  
 * Compiled on:  11/1/2012 11:16:02 PM
 * Compiled by: JOSESEGURAF75E\SeguraMac
 * Source: C:\Development\Research\Piccee_Messenger\scripts\coffee\conversation.coffee      
 * -------------------------------------------------------------------------*/


var GetConversation, GetConversations;

GetConversations = function() {
  var UserConversation, con1, con2, conversationIDs, conversations, counter, currentIndex, htmlConversations, htmlMessages, query, talkingTo, talkingTo2, userIDs, userNames, username;
  htmlConversations = "";
  htmlMessages = "";
  username = "";
  userIDs = new Array();
  userNames = new Array();
  conversations = new Array();
  conversationIDs = new Array();
  currentIndex = 0;
  counter = 0;
  talkingTo = "";
  talkingTo2 = "";
  UserConversation = Parse.Object.extend("UserConversation");
  con1 = new Parse.Query(UserConversation);
  con2 = new Parse.Query(UserConversation);
  con1.equalTo("initiator", {
    __type: "Pointer",
    className: "_User",
    objectId: initiator
  });
  con2.equalTo("participant", {
    __type: "Pointer",
    className: "_User",
    objectId: initiator
  });
  query = new Parse.Query.or(con1, con2);
  query.descending("updatedAt");
  return query.find({
    success: function(convers) {
      var User, i, userQuery;
      for (i in convers) {
        talkingTo = (initiator === convers[i].attributes.initiator.id ? convers[i].attributes.participant.id : convers[i].attributes.initiator.id);
        if ($.inArray(talkingTo, userIDs) < 0) {
          userIDs[counter] = talkingTo;
          conversations[counter] = convers[i];
          counter++;
        }
      }
      User = Parse.Object.extend("User");
      userQuery = new Parse.Query(User);
      userQuery.containedIn("objectId", userIDs);
      return userQuery.find({
        success: function(friends) {
          var UserMessage, f, userMessageQuery;
          for (f in friends) {
            currentIndex = $.inArray(friends[f].id, userIDs);
            if (currentIndex >= 0) {
              userNames[currentIndex] = friends[f].attributes.firstName;
            }
          }
          UserMessage = Parse.Object.extend("UserMessage");
          userMessageQuery = new Parse.Query(UserMessage);
          userMessageQuery.descending("updatedAt");
          userMessageQuery.containedIn("userConversation", conversations);
          counter = 0;
          return userMessageQuery.find({
            success: function(msgs) {
              var backcolor, m;
              for (m in msgs) {
                backcolor = "red";
                if (counter % 2 === 0) {
                  backcolor = "blue";
                } else {
                  backcolor = "red";
                }
                if ($.inArray(msgs[m].attributes.userConversation.id, conversationIDs) === -1) {
                  htmlConversations += "<div onclick='GetConversation(this);' id='" + msgs[m].attributes.userConversation.id + "' class='conversationContainer' style=" + "\"background-color: " + backcolor + "\"" + "><div class='userPic'></div><div class='participantInfo'>" + userNames[counter] + "</div/><div class='latestMessage'>" + msgs[m].attributes.message + "</div><div class='msgTimeFrame'></div></div>";
                  conversationIDs[counter] = msgs[m].attributes.userConversation.id;
                  counter++;
                }
              }
              return $("#myConversations").html(htmlConversations);
            },
            error: function(object, error) {
              return alert("An error occurred");
            }
          });
        },
        error: function(object, error) {
          return alert("An error occurred");
        }
      });
    },
    error: function(object, error) {
      return alert("An error occurred");
    }
  });
};

GetConversation = function(item) {
  var UserConversation, communicatingWith, conversation, conversationID, counter, htmlMessages, pics, query;
  conversationID = $(item).attr("id");
  UserConversation = Parse.Object.extend("UserConversation");
  query = new Parse.Query(UserConversation);
  htmlMessages = "";
  conversation = void 0;
  communicatingWith = void 0;
  pics = new Array();
  counter = 0;
  query.equalTo("objectId", conversationID);
  return query.find({
    success: function(convers) {
      var User, userQuery;
      conversation = convers[0];
      if (conversation.attributes.initiator.id === initiator) {
        communicatingWith = conversation.attributes.participant;
      } else {
        communicatingWith = conversation.attributes.initiator;
      }
      User = Parse.Object.extend("User");
      userQuery = new Parse.Query(User);
      return userQuery.get(communicatingWith.id, {
        success: function(user) {
          var Message, Photo, UserMessage, innerQuery, msgQuery, relQuery;
          communicatingWith = user;
          Message = Parse.Object.extend("UserMessage");
          Photo = Parse.Object.extend("UserPhoto");
          innerQuery = new Parse.Query(Message);
          innerQuery.equalTo("userConversation", conversation);
          relQuery = new Parse.Query(Photo);
          relQuery.matchesQuery("userPhoto", innerQuery);
          relQuery.find({
            success: function(retrievedMsgs) {
              return alert("got it!");
            }
          });
          UserMessage = Parse.Object.extend("UserMessage");
          msgQuery = new Parse.Query(UserMessage);
          msgQuery.descending("updatedAt");
          msgQuery.equalTo("userConversation", conversation);
          return msgQuery.find({
            success: function(msgs) {
              var UserPhoto, i, photoQuery;
              for (i in msgs) {
                if (msgs[i].attributes.userPhoto != null) {
                  pics[counter] = msgs[i].attributes.userPhoto;
                  counter++;
                }
                UserPhoto = Parse.Object.extend("UserPhoto");
                photoQuery = new Parse.Query(UserPhoto);
                photoQuery.containedIn();
                htmlMessages += "<div>" + communicatingWith.attributes.firstName + " MessageID: " + msgs[i].id + " Message: " + msgs[i].attributes.message + "</div>";
              }
              return $("#activeConversation").html(htmlMessages);
            },
            error: function(object, error) {
              return alert("An error occurred");
            }
          });
        },
        error: function(object, error) {
          return alert("An error occurred");
        }
      });
    },
    error: function(object, error) {
      return alert("An error occurred");
    }
  });
};
